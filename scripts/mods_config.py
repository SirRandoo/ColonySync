"""
Contains methods capable of interpreting the "ModsConfig.xml" file generated by
the game "RimWorld."
"""

from dataclasses import dataclass
from dataclasses import field
from pathlib import Path
from xml.etree import cElementTree as ET

__all__ = ["ModsConfig", "load_mods_config", "save_mods_config"]


@dataclass(slots=True)
class ModsConfig:
    """Represents the game's "ModsConfig.xml" file.

    Attributes:
        version:
            The current version of the game the mods config file was last saved
            with.
        active_mods:
            The list of mods that'll be loaded when the game starts.
        known_expansions:
            The list of "mods" that the game will instead recognize as an
            expansion.
    """

    version: str
    active_mods: list[str] = field(default_factory=list)
    known_expansions: list[str] = field(default_factory=list)


def load_mods_config(file_path: Path) -> ModsConfig:
    """Loads the ModsConfig.xml file into memory.

    Args:
        file_path:
            The path to the ModsConfig.xml file in the game's save data folder.
    Raises:
        ValueError:
            The `version` element could not be found, or the value of it was
            `None` or empty.
    """
    with file_path.open("r", encoding="utf-8") as f:
        tree = ET.ElementTree(file=f)

    root_element: ET.Element = tree.getroot()

    game_version: str | None = None
    active_mods: list[str] = []
    known_expansion: list[str] = []

    for child in root_element:
        match child.tag.casefold():
            case "version":
                game_version = child.text
            case "activemods":
                active_mods = [e.text for e in child]
            case "knownexpansions":
                known_expansion = [e.text for e in child]

    if not game_version:
        raise ValueError("Game version could not be found")

    return ModsConfig(
        version=game_version, active_mods=active_mods, known_expansions=known_expansion
    )


def save_mods_config(file_path: Path, mods_config: ModsConfig):
    """Saves the mods config to disk.

    Args:
        file_path:
            The path to the ModsConfig.xml file in the game's save data folder.
        mods_config:
            The modified mods config instance that's being saved to disk.
    """
    root_element: ET.Element = ET.Element("ModsConfigData")
    version_element: ET.Element = ET.SubElement(root_element, "version")
    active_mods_element: ET.Element = ET.SubElement(root_element, "activeMods")
    known_expansions_element: ET.Element = ET.SubElement(
        root_element, "knownExpansions"
    )

    version_element.text = mods_config.version

    for active_mod in mods_config.active_mods:
        li_element: ET.Element = ET.SubElement(active_mods_element, "li")
        li_element.text = active_mod

    for known_expansion in mods_config.known_expansions:
        li_element: ET.Element = ET.SubElement(known_expansions_element, "li")
        li_element.text = known_expansion

    with file_path.open("wb") as f:
        tree = ET.ElementTree(root_element)
        ET.indent(tree, space="  ")
        tree.write(f, xml_declaration=True, encoding="utf-8")
