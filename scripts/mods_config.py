"""
Contains methods capable of interpreting the "ModsConfig.xml" file generated by
the game "RimWorld."
"""

from dataclasses import dataclass
from dataclasses import field
from pathlib import Path
from xml.etree import cElementTree as ET

__all__ = ["ModsConfig", "load_mods_config", "save_mods_config"]


@dataclass(slots=True)
class ModsConfig:
    """
    A data class used to configure mod settings for a given application. Uses the
    `__slots__` attribute to reduce memory usage and improve attribute access speed.

    Attributes:
        version: A string representing the current version of the configuration.
        active_mods: A list of strings representing the active mods in use. Defaults to an empty list.
        known_expansions: A list of strings representing known expansions. Defaults to an empty list.
    """

    version: str
    active_mods: list[str] = field(default_factory=list)
    known_expansions: list[str] = field(default_factory=list)


def load_mods_config(file_path: Path) -> ModsConfig:
    """
    Args:
        file_path: Path to the XML configuration file.

    Returns:
        ModsConfig: An instance of ModsConfig containing the game version, active mods, and known expansions.

    Raises:
        ValueError: If the game version is not found in the XML configuration file.

    """
    with file_path.open("r", encoding="utf-8") as f:
        tree = ET.ElementTree(file=f)

    root_element: ET.Element = tree.getroot()

    game_version: str | None = None
    active_mods: list[str] = []
    known_expansion: list[str] = []

    for child in root_element:
        match child.tag.casefold():
            case "version":
                game_version = child.text
            case "activemods":
                active_mods = [e.text for e in child]
            case "knownexpansions":
                known_expansion = [e.text for e in child]

    if not game_version:
        raise ValueError("Game version could not be found")

    return ModsConfig(
        version=game_version, active_mods=active_mods, known_expansions=known_expansion
    )


def save_mods_config(file_path: Path, mods_config: ModsConfig, dry_run: bool = False):
    """
    Saves the given ModsConfig object to the specified file path in XML format.

    Args:
        file_path: The file path where the ModsConfig XML representation will be saved.
        mods_config: The ModsConfig object containing the configuration data to be saved.
    """
    root_element: ET.Element = ET.Element("ModsConfigData")
    version_element: ET.Element = ET.SubElement(root_element, "version")
    active_mods_element: ET.Element = ET.SubElement(root_element, "activeMods")
    known_expansions_element: ET.Element = ET.SubElement(
        root_element, "knownExpansions"
    )

    version_element.text = mods_config.version

    for active_mod in mods_config.active_mods:
        li_element: ET.Element = ET.SubElement(active_mods_element, "li")
        li_element.text = active_mod

    for known_expansion in mods_config.known_expansions:
        li_element: ET.Element = ET.SubElement(known_expansions_element, "li")
        li_element.text = known_expansion

    if dry_run:
        return

    with file_path.open("wb") as f:
        tree = ET.ElementTree(root_element)
        ET.indent(tree, space="  ")
        tree.write(f, xml_declaration=True, encoding="utf-8")
