from pathlib import Path
from xml.etree import ElementTree as ET

from environment import Environment


def generate_run_configuration():
    """Generates a run configuration for Rider.

    The generated run configuration runs all required prerequisites, then
    launches the game with specific command line arguments that forces Unity to
    log into the console.

    Notes:
        The file generated by this method should never be committed to the mod's
        git repository as it contains a system-dependent path to the game's
        installation location.
    """
    environment = Environment.create_instance()

    root_element: ET.Element = ET.Element(
        "component", attrib={"name": "ProjectRunConfigurationManager"}
    )

    configuration_element: ET.Element = ET.Element(
        "configuration",
        attrib={
            "default": "false",
            "name": "Launch RimWorld",
            "type": "RunUnityExe",
            "factoryName": "Unity Executable",
        },
    )

    ET.SubElement(
        configuration_element,
        "option",
        attrib={
            "name": "EXE_PATH",
            "value": str(environment.game_install_path.joinpath("RimWorldWin64.exe")),
        },
    )

    ET.SubElement(
        configuration_element,
        "option",
        attrib={"name": "PROGRAM_PARAMETERS", "value": "-logFile -"},
    )

    ET.SubElement(
        configuration_element,
        "option",
        attrib={
            "name": "WORKING_DIRECTORY",
            "value": str(environment.game_install_path),
        },
    )
    ET.SubElement(
        configuration_element,
        "option",
        attrib={"name": "PASS_PARENT_ENVS", "value": "1"},
    )
    ET.SubElement(
        configuration_element,
        "option",
        attrib={"name": "USE_EXTERNAL_CONSOLE", "value": "0"},
    )

    method_element = ET.SubElement(configuration_element, "method", attrib={"v": "2"})
    ET.SubElement(
        method_element,
        "option",
        attrib={
            "name": "RunConfigurationTask",
            "enabled": "true",
            "run_configuration_name": "Un-Nest Assemblies",
            "run_configuration_type": "PythonConfigurationType",
        },
    )

    ET.SubElement(
        method_element,
        "option",
        attrib={
            "name": "RunConfigurationTask",
            "enabled": "true",
            "run_configuration_name": "Consolidate Assemblies",
            "run_configuration_type": "PythonConfigurationType",
        },
    )

    ET.SubElement(
        method_element,
        "option",
        attrib={
            "name": "RunConfigurationTask",
            "enabled": "true",
            "run_configuration_name": "Deploy StreamKit",
            "run_configuration_type": "PythonConfigurationType",
        },
    )

    ET.SubElement(
        method_element,
        "option",
        attrib={
            "name": "RunConfigurationTask",
            "enabled": "true",
            "run_configuration_name": "Ensure Active",
            "run_configuration_type": "PythonConfigurationType",
        },
    )

    with Path(".run/Launch RimWorld.run.xml").open("w") as f:
        ET.ElementTree(root_element).write(f, encoding="utf-8")
